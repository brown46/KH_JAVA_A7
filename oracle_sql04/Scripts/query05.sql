/*
 * SELECT, INSERT, UPDATE, DELETE
 * CREATE, ALTER, DROP
 * JOIN, SUBQUERY
 */
SELECT * FROM EMPLOYEES;
/*
 * EMPLOYEES의 HIRE_DATE 열의 값을 +10년 하여 수정한다.
 */

UPDATE EMPLOYEES SET HIRE_DATE= ADD_MONTHS(HIRE_DATE,120); 


/*
 * JOBS 테이블과 동일한 구조의 KJOBS테이블을 만들고 JOB_TITLE 열의 값을 
 * 한글로 번역하여 수정한다.
 * 단, MIN_SALARY, MAX_SALARY 칼럼은 만들 필요 없음
 */
SELECT * FROM USER_TAB_COLUMNS WHERE TABLE_NAME='JOBS';
SELECT * FROM JOBS;
CREATE TABLE KJOBS
AS
SELECT JOB_ID, JOB_TITLE FROM JOBS;


UPDATE KJOBS SET JOB_TITLE = '회장' WHERE JOB_ID ='AD_PRES';
UPDATE KJOBS SET JOB_TITLE = '부회장' WHERE JOB_ID ='AD_VP';
UPDATE KJOBS SET JOB_TITLE = '행정 매니저 보조' WHERE JOB_ID ='AD_ASST';
UPDATE KJOBS SET JOB_TITLE = '재무분석가' WHERE JOB_ID ='FI_MGR';
UPDATE KJOBS SET JOB_TITLE = '회계사' WHERE JOB_ID ='FI_ACCOUNT';
UPDATE KJOBS SET JOB_TITLE = '대리' WHERE JOB_ID ='AC_MGR';
UPDATE KJOBS SET JOB_TITLE = '공인회계' WHERE JOB_ID ='AC_ACCOUNT';
UPDATE KJOBS SET JOB_TITLE = '영업 부장' WHERE JOB_ID ='SA_MAN';
UPDATE KJOBS SET JOB_TITLE = '판매 직원' WHERE JOB_ID ='SA_REP';
UPDATE KJOBS SET JOB_TITLE = '구매부 이사' WHERE JOB_ID ='PU_MAN';
UPDATE KJOBS SET JOB_TITLE = '구매부 사원' WHERE JOB_ID ='ST_MAN';
UPDATE KJOBS SET JOB_TITLE = '창고 사원' WHERE JOB_ID ='ST_CLERK';
UPDATE KJOBS SET JOB_TITLE = '운송 사원' WHERE JOB_ID ='SH_CLERK';
UPDATE KJOBS SET JOB_TITLE = '프로그래머' WHERE JOB_ID ='IT_PROG';
UPDATE KJOBS SET JOB_TITLE = '마케팅 매니저' WHERE JOB_ID ='MK_MAN';
UPDATE KJOBS SET JOB_TITLE = '마케팅 부서 대표' WHERE JOB_ID ='MK_REP';
UPDATE KJOBS SET JOB_TITLE = '인사부 대표' WHERE JOB_ID ='HR_REP';
UPDATE KJOBS SET JOB_TITLE = '홍보부 대표' WHERE JOB_ID ='PR_REP';



SELECT * FROM KJOBS ;

/*
 * DEPARTMENTS 테이블에 DEPARTMENT_NAME_KR 컬럼을 추가 후 DEPARTMENT_NAME을 
 * 한글로 번역한 데이터가 수정되게 한다.
 */
SELECT * FROM DEPARTMENTS;
ALTER TABLE DEPARTMENTS ADD DEPARTMENT_NAME_KR VARCHAR2(30);
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '관리부' WHERE DEPARTMENT_NAME ='Administration';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '마케팅부' WHERE DEPARTMENT_NAME ='Marketing';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '구매관리부' WHERE DEPARTMENT_NAME ='Purchasing';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '인사부' WHERE DEPARTMENT_NAME ='Human Resources';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '운송부' WHERE DEPARTMENT_NAME ='Shipping';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = 'IT부' WHERE DEPARTMENT_NAME ='IT';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '홍보부' WHERE DEPARTMENT_NAME ='Public Relations';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '판매부' WHERE DEPARTMENT_NAME ='Sales';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '경영부' WHERE DEPARTMENT_NAME ='Executive';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '재무부' WHERE DEPARTMENT_NAME ='Finance';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '경리부' WHERE DEPARTMENT_NAME ='Accounting';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '자금부' WHERE DEPARTMENT_NAME ='Treasury';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '세무본부' WHERE DEPARTMENT_NAME ='Corporate Tax';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '자산운용' WHERE DEPARTMENT_NAME ='Control And Credit';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '주주서비스' WHERE DEPARTMENT_NAME ='Shareholder Services';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '복지' WHERE DEPARTMENT_NAME ='Benefits';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '제조' WHERE DEPARTMENT_NAME ='Manufacturing';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '건축' WHERE DEPARTMENT_NAME ='Construction';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '계약' WHERE DEPARTMENT_NAME ='Contracting';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '동작' WHERE DEPARTMENT_NAME ='Operations';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = 'IT지원' WHERE DEPARTMENT_NAME ='IT Support';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '네트워크운영센터 ' WHERE DEPARTMENT_NAME ='NOC';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = 'IT헬프데스크' WHERE DEPARTMENT_NAME ='IT Helpdesk';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '정부판매' WHERE DEPARTMENT_NAME ='Government Sales';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '소매판매' WHERE DEPARTMENT_NAME ='Retail Sales';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '채용' WHERE DEPARTMENT_NAME ='Recruiting';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '급여' WHERE DEPARTMENT_NAME ='Payroll';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '서버' WHERE DEPARTMENT_NAME ='Server';
UPDATE DEPARTMENTS SET DEPARTMENT_NAME_KR = '네트워크' WHERE DEPARTMENT_NAME ='Network';
/*
 *  KJOBS 테이블에 한글로 번역한 직무 타이틀을 JOBS 테이블에 JOB_TITLE_KR 컬럼을
 * 추가 후 수정이 되도록 한다.(DEPARTMENTS 테이블 처럼하나의 테이블에 영문/한글이 모두
 * 들어가게 한다.) 모든 작업을 완료 후 KJOBS 테이블은 제거 한다.
 */
ALTER TABLE JOBS ADD JOB_TITLE_KR VARCHAR2(30);

CREATE TABLE JOBS2
AS
SELECT J.JOB_ID
	 , J.JOB_TITLE
	 , J.MIN_SALARY
	 , J.MAX_SALARY
	 , K.JOB_TITLE AS JOB_TITLE_KR
  FROM JOBS J
  JOIN KJOBS K
    ON J.JOB_ID =K.JOB_ID;

--ALTER TABLE JOBS RENAME T0 JOB;   
SELECT * FROM JOBS2;
--UPDATE JOBS SET JOB_TITLE_KR =




UPDATE JOBS 
   SET JOB_TITLE_KR=(SELECT JOB_TITLE FROM KJOBS WHERE JOB_ID=JOBS.JOB_ID);
   
  UPDATE JOBS SET JOB_TITLE_KR = '인턴 프로그래머' WHERE JOB_ID ='IT_ITRN';
UPDATE JOBS SET JOB_TITLE_KR = '서버 매니저' WHERE JOB_ID ='SV_MGR';
UPDATE JOBS SET JOB_TITLE_KR = '서버 엔지니어' WHERE JOB_ID ='SV_ENG';
UPDATE JOBS SET JOB_TITLE_KR = '네트워크 매니저' WHERE JOB_ID ='NT_MGR';
UPDATE JOBS SET JOB_TITLE_KR = '네트워크 엔지니어' WHERE JOB_ID ='NT_ENG';

SELECT * FROM JOBS;

DROP TABLE KJOBS;

/*
 * JOBS 테이블에 다음의 데이터를 추가 한다.(JOB_TITLE_KR도 추가되어 있어야함)
 * JOB_ID		JOB_TITLE			MIN_SALARY		MAX_SALARY
 * IT_ITRN		Intern_Programmer	3200			3800
 * SV_MGR		Server Manager		4000			10000
 * SV_ENG		Server Engineer		6000			12000
 * NT_MGR		Network Manager 	5000			11000
 * NT_ENG		Network Engineer 	7000			13000
 */
INSERT INTO JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) VALUES('IT_ITRN','Intern_Programmer',3200,3800);
INSERT INTO JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) VALUES('SV_MGR','Server Manager',4000,10000);
INSERT INTO JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) VALUES('SV_ENG','Server Engineer',6000,12000);
INSERT INTO JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) VALUES('NT_MGR','Network Manager',5000,11000);
INSERT INTO JOBS (JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) VALUES('NT_ENG','Network Engineer',7000,13000);




/*
 * DEPARTMENTS 테이블에 다음의 데이터를 추가 한다.(DEPARTMENT_NAME_KR도 추가되어 있어야 함)
 * DEPARTMENT_ID 	DEPATRMENT_NAME		MANAGER_ID	LOCATION_ID
 * 280				Server				NULL		3000
 * 290				Network				NULL		3000
 */
INSERT INTO DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) VALUES(280,'Server',NULL,3000);
--INSERT INTO DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) VALUES((SELECT(MAX(DEPARTMENT_ID)+10),'Server',NULL,3000);
INSERT INTO DEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) VALUES(290,'Network',NULL,3000);


/*
 * 새로 신설된 Server, Network 부서를 위한 인력을 충원하고 있는 것으로 가정하여 각 부서마다
 * 3명의 인원을 EMPLOYEES 에 추가한다.(Manager 직무 1명, Engineer 직무 2명)
 * 		- 초기에 모든 인원을 JOBS테이블에 MIN_SALARY의 급여를 받는 것으로 한다.
 * 		- Server, Network 부서에 인원을 추가 할 때 만드시 1명의 부서장이 필요하기 때문에 인원중 1명을 
 * 		  부서장으로 만든다.(DEPARTMENTS 테이블의 MANAGER_ID를 설정한다.)
 * 		- 부서장으로 선택된 인원은 JOBS 테이블의 MIN_SALARY 급여에서 +2000상승된 급여로 받을 수 있게
 * 		  데이터를 수정한다.
 */
SELECT * FROM JOBS;
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES ;

 						--(SELECT MAX(EMPLOYEE_ID)+1 FROM EMPLOYEES)
INSERT INTO EMPLOYEES VALUES(207,'Arnold','Cecil','Arn',NULL,SYSDATE,'SV_MGR',4000,0,100,280);
INSERT INTO EMPLOYEES VALUES(208,'Erica','Florence ','Eri',NULL,SYSDATE,'SV_ENG',6000,0,207,280);
INSERT INTO EMPLOYEES VALUES(209,'Daniel','Edgar  ','Dan',NULL,SYSDATE,'SV_ENG',6000,NULL,207,280);

INSERT INTO EMPLOYEES VALUES(210,'Edward ','Eugene ','Edw',NULL,SYSDATE,'NT_MGR',5000,NULL,100,290);
INSERT INTO EMPLOYEES VALUES(211,'Henry','Kenneth','Hen',NULL,SYSDATE,'NT_ENG',7000,NULL,210,290);
INSERT INTO EMPLOYEES VALUES(212,'Julia','Linney  ','Juli',NULL,SYSDATE,'NT_ENG',7000,NULL,210,290);

UPDATE DEPARTMENTS SET MANAGER_ID=207 WHERE DEPARTMENT_ID =280 ;
UPDATE DEPARTMENTS SET MANAGER_ID=210 WHERE DEPARTMENT_ID =290 ;

UPDATE EMPLOYEES  SET SALARY  =SALARY+2000 WHERE EMPLOYEE_ID =207 ;
UPDATE EMPLOYEES SET SALARY=SALARY+2000 WHERE EMPLOYEE_ID =210 ;

/*
 * 물가 상승분을 반영하여 모든 급여 정보를 수정하려고 한다.
 * JOBS 테이블과 EMPLOYEES 테이블의 모든 급여 정보를 기존보다 5%~10% 상승시키도록 한다.
 * 		- 급여가 4000미만인 경우 10%상승
 * 		- 급여가 4000이상 8000미만인 경우 8% 상승
 * 		- 급여가 8000이상 12000미만인 경우 6% 상승
 * 		- 급여가 12000이상인 경우 5% 상승
 * 		- 정수 1번째 자리에서 절삭할 것. 예) 4333.333.은 4330
 */
UPDATE EMPLOYEES SET SALARY= CASE WHEN SALARY < 4000 THEN TRUNC(SALARY*1.1,-1)
								  WHEN  4000<=SALARY AND SALARY <8000 THEN TRUNC(SALARY*1.08,-1)
								  WHEN  8000<=SALARY AND SALARY <12000 THEN TRUNC(SALARY*1.06,-1)
								  WHEN  12000<=SALARY  THEN TRUNC(SALARY*1.05,-1)
								  END ;
UPDATE JOBS SET MIN_SALARY = CASE WHEN MIN_SALARY < 4000 THEN TRUNC(MIN_SALARY*1.1,-1)
								  WHEN  4000<=MIN_SALARY AND MIN_SALARY <8000 THEN TRUNC(MIN_SALARY*1.08,-1)
								  WHEN  8000<=MIN_SALARY AND MIN_SALARY <12000 THEN TRUNC(MIN_SALARY*1.06,-1)
								  WHEN  12000<=MIN_SALARY  THEN TRUNC(MIN_SALARY*1.05,-1)
								  END ;
UPDATE JOBS SET MAX_SALARY = CASE WHEN MAX_SALARY < 4000 THEN TRUNC(MAX_SALARY*1.1,-1)
								  WHEN  4000<=MAX_SALARY AND MAX_SALARY <8000 THEN TRUNC(MAX_SALARY*1.08,-1)
								  WHEN  8000<=MAX_SALARY AND MAX_SALARY <12000 THEN TRUNC(MAX_SALARY*1.06,-1)
								  WHEN  12000<=MAX_SALARY  THEN TRUNC(MAX_SALARY*1.05,-1)
								  END ;

SELECT * FROM EMPLOYEES;		 
/*
 * 
 */								 
CREATE TABLE 전체공지(
       번호 NUMBER PRIMARY KEY
     , 제목 VARCHAR2(30)
     , 내용 VARCHAR2(300)
     , 작성일자 DATE
     , 부서ID NUMBER
);

SELECT * FROM 전체공지;
INSERT INTO 전체공지 VALUES(001,'공지','전체공지',SYSDATE,NULL);
DROP TABLE 전체공지;

SELECT * FROM DEPARTMENTS;

CREATE TABLE 사내공지(
       번호 NUMBER
     , 제목 VARCHAR2(30)
     , 내용 VARCHAR2(300)
     , 작성일자 DATE
     , 부서ID NUMBER
);

--(SELECT MAX(번호)+1 FROM 사내공지)

SELECT * FROM 사내공지;
INSERT INTO 사내공지 VALUES(1,'공지','관리 부서만 확인할 수 있는 공지입니다.',SYSDATE,10);
INSERT INTO 사내공지 VALUES(2,'공지','마케팅 부서만 확인할 수 있는 공지입니다.',SYSDATE,20);
INSERT INTO 사내공지 VALUES(3,'공지','구매관리 부서만 확인할 수 있는 공지입니다.',SYSDATE,30);
INSERT INTO 사내공지 VALUES(4,'공지','인사 부서만 확인할 수 있는 공지입니다.',SYSDATE,40);
INSERT INTO 사내공지 VALUES(5,'공지','운송 부서만 확인할 수 있는 공지입니다.',SYSDATE,50);
INSERT INTO 사내공지 VALUES(6,'공지','IT 부서만 확인할 수 있는 공지입니다.',SYSDATE,60);
INSERT INTO 사내공지 VALUES(7,'공지','홍보 부서만 확인할 수 있는 공지입니다.',SYSDATE,70);
INSERT INTO 사내공지 VALUES(8,'공지','판매 부서만 확인할 수 있는 공지입니다.',SYSDATE,80);
INSERT INTO 사내공지 VALUES(9,'공지','경영 부서만 확인할 수 있는 공지입니다.',SYSDATE,90);
INSERT INTO 사내공지 VALUES(10,'공지','재무 부서만 확인할 수 있는 공지입니다.',SYSDATE,100);
INSERT INTO 사내공지 VALUES(11,'공지','경리 부서만 확인할 수 있는 공지입니다.',SYSDATE,110);
INSERT INTO 사내공지 VALUES(12,'공지','자금 부서만 확인할 수 있는 공지입니다.',SYSDATE,120);
INSERT INTO 사내공지 VALUES(13,'공지','세무본 부서만 확인할 수 있는 공지입니다.',SYSDATE,130);
INSERT INTO 사내공지 VALUES(14,'공지','자산운용 부서만 확인할 수 있는 공지입니다.',SYSDATE,140);
INSERT INTO 사내공지 VALUES(15,'공지','주주서비스 부서만 확인할 수 있는 공지입니다.',SYSDATE,150);
INSERT INTO 사내공지 VALUES(16,'공지','복지 부서만 확인할 수 있는 공지입니다.',SYSDATE,160);
INSERT INTO 사내공지 VALUES(17,'공지','제조 부서만 확인할 수 있는 공지입니다.',SYSDATE,170);
INSERT INTO 사내공지 VALUES(18,'공지','건축 부서만 확인할 수 있는 공지입니다.',SYSDATE,180);
INSERT INTO 사내공지 VALUES(19,'공지','계약 부서만 확인할 수 있는 공지입니다.',SYSDATE,190);
INSERT INTO 사내공지 VALUES(20,'공지','동작 부서만 확인할 수 있는 공지입니다.',SYSDATE,200);
INSERT INTO 사내공지 VALUES(21,'공지','IT지원 부서만 확인할 수 있는 공지입니다.',SYSDATE,210);
INSERT INTO 사내공지 VALUES(22,'공지','네트워크운영센터  부서만 확인할 수 있는 공지입니다.',SYSDATE,220);
INSERT INTO 사내공지 VALUES(23,'공지','IT헬프데스크 부서만 확인할 수 있는 공지입니다.',SYSDATE,230);
INSERT INTO 사내공지 VALUES(24,'공지','정부판매 부서만 확인할 수 있는 공지입니다.',SYSDATE,240);
INSERT INTO 사내공지 VALUES(25,'공지','소매판매 부서만 확인할 수 있는 공지입니다.',SYSDATE,250);
INSERT INTO 사내공지 VALUES(26,'공지','채용 부서만 확인할 수 있는 공지입니다.',SYSDATE,260);
INSERT INTO 사내공지 VALUES(27,'공지','급여 부서만 확인할 수 있는 공지입니다.',SYSDATE,270);
INSERT INTO 사내공지 VALUES(28,'공지','서버 부서만 확인할 수 있는 공지입니다.',SYSDATE,280);
INSERT INTO 사내공지 VALUES(29,'공지','네트워크 부서만 확인할 수 있는 공지입니다.',SYSDATE,290);

		
SELECT * 
  FROM 전체공지  A
  JOIN 사내공지  D
    ON A.제목 =D.제목
 WHERE D.부서ID=100;
  
  
								 
								 
								 
								 
								 
								 
								 